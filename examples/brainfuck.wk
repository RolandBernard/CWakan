
tape := dic(0:0);
head := 0;
stack := [];

program := read;

input := none;
pos_in_input := 0;

for i := 0 \ i < len program \ i := i+1 do (
	cur_inst := program[i];
	if (cur_inst = '>') then (
		head := head+1;
		if (not (tape find head)) then (
			tape[head] := 0
		)
	) else if (cur_inst = '<') then (
		head := head-1;
		if (not (tape find head)) then (
			tape[head] := 0
		)
	) else if (cur_inst = '+') then (
		tape[head] := tape[head]+1;
		if (tape[head] >= 256) then (
			tape[head] := tape[head] - 256
		)
	) else if (cur_inst = '-') then (
		tape[head] := tape[head]-1;
		if (tape[head] < 0) then (
			tape[head] := tape[head] + 256
		)
	) else if (cur_inst = '[') then (
		if (tape[head] = 0) then (
			sym := 0;
			i := i+1;
			while (not (program[i] = ']' and sym = 0) and i < len program) do (
				if (program[i] = '[') then (
					sym := sym+1
				) else if (program[i] = ']') then (
					sym := sym-1
				);
				i := i+1
			)
		) else (
			stack := stack + [i]
		)
	) else if (cur_inst = ']') then (
		i := stack[-1] - 1;
		stack := stack[0:-2]
	) else if (cur_inst = '.') then (
		write to_ascii tape[head]
	) else if (cur_inst = ',') then (
		if(input = none) then (
			input := read;
			pos_in_input := 0
		) else if (len input = pos_in_input) then (
			input := read;
			pos_in_input := 0
		);
		tape[head] := input[pos_in_input];
		pos_in_input := pos_in_input+1
	)
)

